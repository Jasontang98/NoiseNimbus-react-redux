{"ast":null,"code":"import { csrfFetch } from \"./csrf\";\nconst GET_COMMENTS = \"/api/GETCOMMENTS\";\nconst ADD_COMMENT = \"/api/ADDCOMMENT\";\nconst DELETE_COMMENT = \"/api/DELETECOMMENT\";\n\nconst getComments = comments => ({\n  type: GET_COMMENTS,\n  comments\n});\n\nconst addComment = comment => ({\n  type: ADD_COMMENT,\n  comment\n});\n\nconst deleteComment = comment => ({\n  type: DELETE_COMMENT,\n  comment\n});\n\nexport const getAllComments = song => async dispatch => {\n  const response = await csrfFetch(`/api/songs/${song.id}/comments`, {\n    method: \"GET\"\n  });\n\n  if (response.ok) {\n    const data = await response.json();\n    dispatch(getComments(data));\n  }\n};\nexport const createComment = comments => async dispatch => {\n  const {\n    userId,\n    songId,\n    body\n  } = comments;\n  const response = await csrfFetch(`/api/songs/${songId}/comments`, {\n    method: \"POST\",\n    body: JSON.stringify({\n      userId,\n      songId,\n      body\n    })\n  });\n\n  if (response.ok) {\n    const data = await response.json();\n    dispatch(addComment(data));\n    return data;\n  }\n};\nexport const removeComment = payload => async dispatch => {\n  const commentId = payload.comment.id;\n  console.log(commentId);\n};\nconst initialState = {};\n\nconst commentReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  let newState = { ...state\n  };\n\n  switch (action.type) {\n    case GET_COMMENTS:\n      newState = {};\n      action.comments.forEach(comment => newState[comment.id] = comment);\n      return newState;\n\n    case ADD_COMMENT:\n      return { ...state,\n        [action.comment.id]: action.comment\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default commentReducer;","map":{"version":3,"names":["csrfFetch","GET_COMMENTS","ADD_COMMENT","DELETE_COMMENT","getComments","comments","type","addComment","comment","deleteComment","getAllComments","song","dispatch","response","id","method","ok","data","json","createComment","userId","songId","body","JSON","stringify","removeComment","payload","commentId","console","log","initialState","commentReducer","state","action","newState","forEach"],"sources":["/home/jasontang/noiseNimbus/frontend/src/store/comment.js"],"sourcesContent":["import { csrfFetch } from \"./csrf\";\n\nconst GET_COMMENTS = \"/api/GETCOMMENTS\";\nconst ADD_COMMENT = \"/api/ADDCOMMENT\";\nconst DELETE_COMMENT = \"/api/DELETECOMMENT\";\n\nconst getComments = (comments) => ({\n    type: GET_COMMENTS,\n    comments\n})\n\nconst addComment = (comment) => ({\n    type: ADD_COMMENT,\n    comment\n})\n\nconst deleteComment = (comment) => ({\n    type: DELETE_COMMENT,\n    comment\n})\n\nexport const getAllComments = (song) => async (dispatch) => {\n    const response = await csrfFetch(`/api/songs/${song.id}/comments`, {\n        method: \"GET\"\n    });\n\n    if (response.ok) {\n        const data = await response.json();\n        dispatch(getComments(data));\n    }\n};\n\nexport const createComment = (comments) => async (dispatch) => {\n    const { userId, songId, body} = comments;\n    const response = await csrfFetch(`/api/songs/${songId}/comments`, {\n        method: \"POST\",\n        body: JSON.stringify({\n            userId,\n            songId,\n            body\n        })\n    });\n    if (response.ok) {\n        const data = await response.json();\n        dispatch(addComment(data));\n        return data;\n    }\n}\n\nexport const removeComment = (payload) => async (dispatch) => {\n    const commentId = payload.comment.id;\n    console.log(commentId)\n}\n\nconst initialState = {};\n\nconst commentReducer = (state = initialState, action) => {\n    let newState = { ...state };\n    switch (action.type) {\n        case GET_COMMENTS:\n            newState = {};\n            action.comments.forEach(comment => (newState[comment.id] = comment));\n            return newState;\n\n        case ADD_COMMENT:\n            return { ...state, [action.comment.id]: action.comment };\n\n\n        default:\n            return state;\n    }\n}\n\nexport default commentReducer;\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,QAA1B;AAEA,MAAMC,YAAY,GAAG,kBAArB;AACA,MAAMC,WAAW,GAAG,iBAApB;AACA,MAAMC,cAAc,GAAG,oBAAvB;;AAEA,MAAMC,WAAW,GAAIC,QAAD,KAAe;EAC/BC,IAAI,EAAEL,YADyB;EAE/BI;AAF+B,CAAf,CAApB;;AAKA,MAAME,UAAU,GAAIC,OAAD,KAAc;EAC7BF,IAAI,EAAEJ,WADuB;EAE7BM;AAF6B,CAAd,CAAnB;;AAKA,MAAMC,aAAa,GAAID,OAAD,KAAc;EAChCF,IAAI,EAAEH,cAD0B;EAEhCK;AAFgC,CAAd,CAAtB;;AAKA,OAAO,MAAME,cAAc,GAAIC,IAAD,IAAU,MAAOC,QAAP,IAAoB;EACxD,MAAMC,QAAQ,GAAG,MAAMb,SAAS,CAAE,cAAaW,IAAI,CAACG,EAAG,WAAvB,EAAmC;IAC/DC,MAAM,EAAE;EADuD,CAAnC,CAAhC;;EAIA,IAAIF,QAAQ,CAACG,EAAb,EAAiB;IACb,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;IACAN,QAAQ,CAACR,WAAW,CAACa,IAAD,CAAZ,CAAR;EACH;AACJ,CATM;AAWP,OAAO,MAAME,aAAa,GAAId,QAAD,IAAc,MAAOO,QAAP,IAAoB;EAC3D,MAAM;IAAEQ,MAAF;IAAUC,MAAV;IAAkBC;EAAlB,IAA0BjB,QAAhC;EACA,MAAMQ,QAAQ,GAAG,MAAMb,SAAS,CAAE,cAAaqB,MAAO,WAAtB,EAAkC;IAC9DN,MAAM,EAAE,MADsD;IAE9DO,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;MACjBJ,MADiB;MAEjBC,MAFiB;MAGjBC;IAHiB,CAAf;EAFwD,CAAlC,CAAhC;;EAQA,IAAIT,QAAQ,CAACG,EAAb,EAAiB;IACb,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;IACAN,QAAQ,CAACL,UAAU,CAACU,IAAD,CAAX,CAAR;IACA,OAAOA,IAAP;EACH;AACJ,CAfM;AAiBP,OAAO,MAAMQ,aAAa,GAAIC,OAAD,IAAa,MAAOd,QAAP,IAAoB;EAC1D,MAAMe,SAAS,GAAGD,OAAO,CAAClB,OAAR,CAAgBM,EAAlC;EACAc,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACH,CAHM;AAKP,MAAMG,YAAY,GAAG,EAArB;;AAEA,MAAMC,cAAc,GAAG,YAAkC;EAAA,IAAjCC,KAAiC,uEAAzBF,YAAyB;EAAA,IAAXG,MAAW;EACrD,IAAIC,QAAQ,GAAG,EAAE,GAAGF;EAAL,CAAf;;EACA,QAAQC,MAAM,CAAC3B,IAAf;IACI,KAAKL,YAAL;MACIiC,QAAQ,GAAG,EAAX;MACAD,MAAM,CAAC5B,QAAP,CAAgB8B,OAAhB,CAAwB3B,OAAO,IAAK0B,QAAQ,CAAC1B,OAAO,CAACM,EAAT,CAAR,GAAuBN,OAA3D;MACA,OAAO0B,QAAP;;IAEJ,KAAKhC,WAAL;MACI,OAAO,EAAE,GAAG8B,KAAL;QAAY,CAACC,MAAM,CAACzB,OAAP,CAAeM,EAAhB,GAAqBmB,MAAM,CAACzB;MAAxC,CAAP;;IAGJ;MACI,OAAOwB,KAAP;EAXR;AAaH,CAfD;;AAiBA,eAAeD,cAAf"},"metadata":{},"sourceType":"module"}