{"ast":null,"code":"var _jsxFileName = \"/home/jasontang/noiseNimbus/frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Route, Switch } from \"react-router-dom\";\nimport * as sessionActions from \"./store/session\";\nimport Navigation from \"./components/Navigation\"; // import AudioPlayer from \"react-h5-audio-player\";\n// import \"react-h5-audio-player/lib/styles.css\";\n\nimport Splash from \"./components/SplashPage/Splash\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const dispatch = useDispatch();\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [song, setSong] = useState(\"\");\n  const [playlist, setPlaylist] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [currentSongName, setCurrentSongName] = useState(\"No Songs Currently Playing\");\n  const player = useRef();\n  useEffect(() => {\n    dispatch(sessionActions.restoreUser()).then(() => setIsLoaded(true));\n  }, [dispatch]);\n\n  const audioFunction = async singleSong => {\n    setCurrentSongName(singleSong.title);\n    await setSong(`${singleSong.songUrl}`);\n    setPlaylist([]);\n    player.current.audio.current.play(song);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {\n      isLoaded: isLoaded\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), isLoaded && /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/\",\n        children: /*#__PURE__*/_jsxDEV(Splash, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        children: \"Page Not Found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"Y2V+5UOXZTItGCYQK6WuPEC0QK8=\", false, function () {\n  return [useDispatch];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useDispatch","Route","Switch","sessionActions","Navigation","Splash","App","dispatch","isLoaded","setIsLoaded","song","setSong","playlist","setPlaylist","currentIndex","setCurrentIndex","currentSongName","setCurrentSongName","player","restoreUser","then","audioFunction","singleSong","title","songUrl","current","audio","play"],"sources":["/home/jasontang/noiseNimbus/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Route, Switch } from \"react-router-dom\";\nimport * as sessionActions from \"./store/session\";\nimport Navigation from \"./components/Navigation\";\n\n// import AudioPlayer from \"react-h5-audio-player\";\n// import \"react-h5-audio-player/lib/styles.css\";\n\nimport Splash from \"./components/SplashPage/Splash\";\n\nfunction App() {\n  const dispatch = useDispatch();\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  const [song, setSong] = useState(\"\");\n  const [playlist, setPlaylist] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [currentSongName, setCurrentSongName] = useState(\n    \"No Songs Currently Playing\"\n  );\n  const player = useRef();\n\n  useEffect(() => {\n    dispatch(sessionActions.restoreUser()).then(() => setIsLoaded(true));\n  }, [dispatch]);\n\n  const audioFunction = async (singleSong) => {\n    setCurrentSongName(singleSong.title);\n    await setSong(`${singleSong.songUrl}`);\n    setPlaylist([]);\n    player.current.audio.current.play(song);\n  };\n\n  return (\n    <>\n      <Navigation isLoaded={isLoaded} />\n      {isLoaded && (\n        <Switch>\n          <Route exact path='/'>\n            <Splash />\n          </Route>\n          {/* <Route path='/Songs'>\n            <Songs />\n          </Route> */}\n          <Route >\n            Page Not Found\n          </Route>\n        </Switch>\n     )}\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,kBAA9B;AACA,OAAO,KAAKC,cAAZ,MAAgC,iBAAhC;AACA,OAAOC,UAAP,MAAuB,yBAAvB,C,CAEA;AACA;;AAEA,OAAOC,MAAP,MAAmB,gCAAnB;;;;AAEA,SAASC,GAAT,GAAe;EAAA;;EACb,MAAMC,QAAQ,GAAGP,WAAW,EAA5B;EACA,MAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,KAAD,CAAxC;EAEA,MAAM,CAACa,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,EAAD,CAAhC;EACA,MAAM,CAACe,QAAD,EAAWC,WAAX,IAA0BhB,QAAQ,CAAC,EAAD,CAAxC;EACA,MAAM,CAACiB,YAAD,EAAeC,eAAf,IAAkClB,QAAQ,CAAC,CAAD,CAAhD;EACA,MAAM,CAACmB,eAAD,EAAkBC,kBAAlB,IAAwCpB,QAAQ,CACpD,4BADoD,CAAtD;EAGA,MAAMqB,MAAM,GAAGnB,MAAM,EAArB;EAEAD,SAAS,CAAC,MAAM;IACdS,QAAQ,CAACJ,cAAc,CAACgB,WAAf,EAAD,CAAR,CAAuCC,IAAvC,CAA4C,MAAMX,WAAW,CAAC,IAAD,CAA7D;EACD,CAFQ,EAEN,CAACF,QAAD,CAFM,CAAT;;EAIA,MAAMc,aAAa,GAAG,MAAOC,UAAP,IAAsB;IAC1CL,kBAAkB,CAACK,UAAU,CAACC,KAAZ,CAAlB;IACA,MAAMZ,OAAO,CAAE,GAAEW,UAAU,CAACE,OAAQ,EAAvB,CAAb;IACAX,WAAW,CAAC,EAAD,CAAX;IACAK,MAAM,CAACO,OAAP,CAAeC,KAAf,CAAqBD,OAArB,CAA6BE,IAA7B,CAAkCjB,IAAlC;EACD,CALD;;EAOA,oBACE;IAAA,wBACE,QAAC,UAAD;MAAY,QAAQ,EAAEF;IAAtB;MAAA;MAAA;MAAA;IAAA,QADF,EAEGA,QAAQ,iBACP,QAAC,MAAD;MAAA,wBACE,QAAC,KAAD;QAAO,KAAK,MAAZ;QAAa,IAAI,EAAC,GAAlB;QAAA,uBACE,QAAC,MAAD;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA,QADF,eAOE,QAAC,KAAD;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAPF;IAAA;MAAA;MAAA;MAAA;IAAA,QAHJ;EAAA,gBADF;AAkBD;;GAzCQF,G;UACUN,W;;;KADVM,G;AA2CT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}