{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport sessionReducer from \"./session\";\nimport songReducer from \"./songFile\";\nimport commentReducer from \"./comment\";\nconst rootReducer = combineReducers({\n  // add reducer functions here\n  session: sessionReducer,\n  songFile: songReducer,\n  comment: commentReducer\n});\nlet enhancer;\n\nif (process.env.NODE_ENV === \"production\") {\n  enhancer = applyMiddleware(thunk);\n} else {\n  const logger = require(\"redux-logger\").default;\n\n  const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  enhancer = composeEnhancers(applyMiddleware(thunk, logger));\n}\n\nconst configureStore = preloadedState => {\n  return createStore(rootReducer, preloadedState, enhancer);\n};\n\nexport default configureStore;","map":{"version":3,"names":["createStore","combineReducers","applyMiddleware","compose","thunk","sessionReducer","songReducer","commentReducer","rootReducer","session","songFile","comment","enhancer","process","env","NODE_ENV","logger","require","default","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","configureStore","preloadedState"],"sources":["/home/jasontang/noiseNimbus/frontend/src/store/index.js"],"sourcesContent":["import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport sessionReducer from \"./session\";\nimport songReducer from \"./songFile\";\nimport commentReducer from \"./comment\";\n\nconst rootReducer = combineReducers({\n  // add reducer functions here\n  session: sessionReducer,\n  songFile: songReducer,\n  comment: commentReducer\n});\n\nlet enhancer;\n\nif (process.env.NODE_ENV === \"production\") {\n  enhancer = applyMiddleware(thunk);\n} else {\n  const logger = require(\"redux-logger\").default;\n  const composeEnhancers =\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  enhancer = composeEnhancers(applyMiddleware(thunk, logger));\n}\n\nconst configureStore = (preloadedState) => {\n  return createStore(rootReducer, preloadedState, enhancer);\n};\n\nexport default configureStore;\n"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,EAAwDC,OAAxD,QAAuE,OAAvE;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,OAAOC,cAAP,MAA2B,WAA3B;AACA,OAAOC,WAAP,MAAwB,YAAxB;AACA,OAAOC,cAAP,MAA2B,WAA3B;AAEA,MAAMC,WAAW,GAAGP,eAAe,CAAC;EAClC;EACAQ,OAAO,EAAEJ,cAFyB;EAGlCK,QAAQ,EAAEJ,WAHwB;EAIlCK,OAAO,EAAEJ;AAJyB,CAAD,CAAnC;AAOA,IAAIK,QAAJ;;AAEA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;EACzCH,QAAQ,GAAGV,eAAe,CAACE,KAAD,CAA1B;AACD,CAFD,MAEO;EACL,MAAMY,MAAM,GAAGC,OAAO,CAAC,cAAD,CAAP,CAAwBC,OAAvC;;EACA,MAAMC,gBAAgB,GACpBC,MAAM,CAACC,oCAAP,IAA+ClB,OADjD;EAEAS,QAAQ,GAAGO,gBAAgB,CAACjB,eAAe,CAACE,KAAD,EAAQY,MAAR,CAAhB,CAA3B;AACD;;AAED,MAAMM,cAAc,GAAIC,cAAD,IAAoB;EACzC,OAAOvB,WAAW,CAACQ,WAAD,EAAce,cAAd,EAA8BX,QAA9B,CAAlB;AACD,CAFD;;AAIA,eAAeU,cAAf"},"metadata":{},"sourceType":"module"}