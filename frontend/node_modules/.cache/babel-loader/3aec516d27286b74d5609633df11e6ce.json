{"ast":null,"code":"import { csrfFetch } from \"./csrf\";\nconst GET_COMMENTS = \"/api/GETCOMMENTS\";\nconst ADD_COMMENT = \"/api/ADDCOMMENT\";\nconst DELETE_COMMENT = \"/api/DELETECOMMENT\";\n\nconst getComments = comments => ({\n  type: GET_COMMENTS,\n  comments\n});\n\nconst addComment = comment => ({\n  type: ADD_COMMENT,\n  comment\n});\n\nconst deleteComment = id => ({\n  type: DELETE_COMMENT,\n  id\n});\n\nexport const getAllComments = songId => async dispatch => {\n  const response = await csrfFetch(`/api/songs/${songId}/comments`, {\n    method: \"GET\"\n  });\n\n  if (response.ok) {\n    const data = await response.json();\n    dispatch(getComments(data));\n  }\n};\nexport const createComment = comments => async dispatch => {\n  const {\n    userId,\n    songId,\n    body\n  } = comments;\n  const response = await csrfFetch(`/api/songs/${songId}/comments`, {\n    method: \"POST\",\n    body: JSON.stringify({\n      userId,\n      songId,\n      body\n    })\n  });\n\n  if (response.ok) {\n    const data = await response.json();\n    dispatch(addComment(data));\n    return data;\n  }\n};\nconst initialState = {};\n\nconst commentReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_COMMENTS:\n      newState = { ...state\n      };\n      action.comments.forEach(comment => newState[comment.id] = comment);\n      return newState;\n\n    case ADD_COMMENT:\n      return { ...state,\n        [action.comment.id]: action.comment\n      };\n\n    case DELETE_COMMENT:\n      return delete { ...state,\n        [action.id]: action.id\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default commentReducer;","map":{"version":3,"names":["csrfFetch","GET_COMMENTS","ADD_COMMENT","DELETE_COMMENT","getComments","comments","type","addComment","comment","deleteComment","id","getAllComments","songId","dispatch","response","method","ok","data","json","createComment","userId","body","JSON","stringify","initialState","commentReducer","state","action","newState","forEach"],"sources":["/home/jasontang/noiseNimbus/frontend/src/store/comment.js"],"sourcesContent":["import { csrfFetch } from \"./csrf\";\n\nconst GET_COMMENTS = \"/api/GETCOMMENTS\";\nconst ADD_COMMENT = \"/api/ADDCOMMENT\";\nconst DELETE_COMMENT = \"/api/DELETECOMMENT\";\n\nconst getComments = (comments) => ({\n    type: GET_COMMENTS,\n    comments\n})\n\nconst addComment = (comment) => ({\n    type: ADD_COMMENT,\n    comment\n})\n\nconst deleteComment = (id) => ({\n    type: DELETE_COMMENT,\n    id\n})\n\nexport const getAllComments = (songId) => async (dispatch) => {\n    const response = await csrfFetch(`/api/songs/${songId}/comments`, {\n        method: \"GET\"\n    });\n\n    if (response.ok) {\n        const data = await response.json();\n        dispatch(getComments(data));\n    }\n};\n\nexport const createComment = (comments) => async (dispatch) => {\n    const { userId, songId, body} = comments;\n    const response = await csrfFetch(`/api/songs/${songId}/comments`, {\n        method: \"POST\",\n        body: JSON.stringify({\n            userId,\n            songId,\n            body\n        })\n    });\n    if (response.ok) {\n        const data = await response.json();\n        dispatch(addComment(data));\n        return data;\n    }\n}\n\n\n\nconst initialState = {};\n\nconst commentReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case GET_COMMENTS:\n            newState = {...state};\n            action.comments.forEach(comment => (newState[comment.id] = comment));\n            return newState;\n\n        case ADD_COMMENT:\n            return { ...state, [action.comment.id]: action.comment };\n\n        case DELETE_COMMENT:\n            return delete { ...state, [action.id]: action.id };\n\n        default:\n            return state;\n    }\n}\n\nexport default commentReducer;\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,QAA1B;AAEA,MAAMC,YAAY,GAAG,kBAArB;AACA,MAAMC,WAAW,GAAG,iBAApB;AACA,MAAMC,cAAc,GAAG,oBAAvB;;AAEA,MAAMC,WAAW,GAAIC,QAAD,KAAe;EAC/BC,IAAI,EAAEL,YADyB;EAE/BI;AAF+B,CAAf,CAApB;;AAKA,MAAME,UAAU,GAAIC,OAAD,KAAc;EAC7BF,IAAI,EAAEJ,WADuB;EAE7BM;AAF6B,CAAd,CAAnB;;AAKA,MAAMC,aAAa,GAAIC,EAAD,KAAS;EAC3BJ,IAAI,EAAEH,cADqB;EAE3BO;AAF2B,CAAT,CAAtB;;AAKA,OAAO,MAAMC,cAAc,GAAIC,MAAD,IAAY,MAAOC,QAAP,IAAoB;EAC1D,MAAMC,QAAQ,GAAG,MAAMd,SAAS,CAAE,cAAaY,MAAO,WAAtB,EAAkC;IAC9DG,MAAM,EAAE;EADsD,CAAlC,CAAhC;;EAIA,IAAID,QAAQ,CAACE,EAAb,EAAiB;IACb,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAnB;IACAL,QAAQ,CAACT,WAAW,CAACa,IAAD,CAAZ,CAAR;EACH;AACJ,CATM;AAWP,OAAO,MAAME,aAAa,GAAId,QAAD,IAAc,MAAOQ,QAAP,IAAoB;EAC3D,MAAM;IAAEO,MAAF;IAAUR,MAAV;IAAkBS;EAAlB,IAA0BhB,QAAhC;EACA,MAAMS,QAAQ,GAAG,MAAMd,SAAS,CAAE,cAAaY,MAAO,WAAtB,EAAkC;IAC9DG,MAAM,EAAE,MADsD;IAE9DM,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;MACjBH,MADiB;MAEjBR,MAFiB;MAGjBS;IAHiB,CAAf;EAFwD,CAAlC,CAAhC;;EAQA,IAAIP,QAAQ,CAACE,EAAb,EAAiB;IACb,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAnB;IACAL,QAAQ,CAACN,UAAU,CAACU,IAAD,CAAX,CAAR;IACA,OAAOA,IAAP;EACH;AACJ,CAfM;AAmBP,MAAMO,YAAY,GAAG,EAArB;;AAEA,MAAMC,cAAc,GAAG,YAAkC;EAAA,IAAjCC,KAAiC,uEAAzBF,YAAyB;EAAA,IAAXG,MAAW;;EACrD,QAAQA,MAAM,CAACrB,IAAf;IACI,KAAKL,YAAL;MACI2B,QAAQ,GAAG,EAAC,GAAGF;MAAJ,CAAX;MACAC,MAAM,CAACtB,QAAP,CAAgBwB,OAAhB,CAAwBrB,OAAO,IAAKoB,QAAQ,CAACpB,OAAO,CAACE,EAAT,CAAR,GAAuBF,OAA3D;MACA,OAAOoB,QAAP;;IAEJ,KAAK1B,WAAL;MACI,OAAO,EAAE,GAAGwB,KAAL;QAAY,CAACC,MAAM,CAACnB,OAAP,CAAeE,EAAhB,GAAqBiB,MAAM,CAACnB;MAAxC,CAAP;;IAEJ,KAAKL,cAAL;MACI,OAAO,OAAO,EAAE,GAAGuB,KAAL;QAAY,CAACC,MAAM,CAACjB,EAAR,GAAaiB,MAAM,CAACjB;MAAhC,CAAd;;IAEJ;MACI,OAAOgB,KAAP;EAbR;AAeH,CAhBD;;AAkBA,eAAeD,cAAf"},"metadata":{},"sourceType":"module"}