{"ast":null,"code":"import { csrfFetch } from \"./csrf\";\nconst PLAY_SONGS = \"api/PLAYSONGS\";\nconst ADD_SONG = \"api/ADDSONG\";\nconst EDIT_SONG = \"api/EDITSONG\";\nconst DELETE_SONG = \"api/DELETESONG\";\n\nconst playSongs = songs => ({\n  type: PLAY_SONGS,\n  songs\n});\n\nconst addSong = song => ({\n  type: ADD_SONG,\n  song\n});\n\nconst editSong = song => ({\n  type: EDIT_SONG,\n  song\n});\n\nconst deleteSong = song => ({\n  type: DELETE_SONG,\n  song\n});\n\nexport const playAllSongs = () => async dispatch => {\n  const response = await csrfFetch(\"/api/music/Songs\", {\n    method: \"GET\"\n  });\n\n  if (response.ok) {\n    const songs = await response.json();\n    dispatch(playSongs(songs));\n    return songs;\n  }\n\n  ;\n};\nexport const addNewSong = songFile => async dispatch => {\n  const formData = new FormData();\n  console.log(Song.file);\n  formData.append('Song', Song.file);\n  formData.append('fileName', Song.fileName);\n  formData.append('userId', Song.userId);\n  const response = await csrfFetch(\"/api/music/Songs\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    },\n    body: formData\n  });\n\n  if (response.ok) {\n    const newSong = await response.json();\n    dispatch(addSong(newSong));\n    dispatch(playAllSongs());\n    return true;\n  }\n\n  ;\n};\nexport const editNewSong = songEdit => async dispatch => {\n  songEdit = JSON.stringify(songEdit);\n  const response = await csrfFetch(\"/api/music/Songs\", {\n    method: \"PUT\",\n    headers: {\n      \"ContentType\": \"application/json\"\n    },\n    body: songEdit\n  });\n\n  if (response.ok) {\n    const newSongEdit = await response.json();\n    dispatch(editSong(newSongEdit));\n    return true;\n  }\n\n  ;\n};\nexport const deleteCurrentSong = song = async dispatch => {\n  const response = await csrfFetch(`/api/music/Songs/${song.id}`, {\n    method: \"DELETE\"\n  });\n\n  if (response.ok) {\n    dispatch(deleteSong(song));\n  }\n};\nconst initialState = {};\n\nconst songReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const newState = { ...state\n  };\n\n  switch (action.type) {\n    case PLAY_SONGS:\n      action.songs.forEach(song => newState[song.id] = song);\n      return newState;\n\n    case ADD_SONG:\n      return { ...state,\n        [action.Song.id]: { ...action.Song\n        }\n      };\n\n    case EDIT_SONG:\n      return { ...state,\n        [action.song.id]: { ...action.song\n        }\n      };\n\n    case DELETE_SONG:\n      delete newState[action.song.id];\n      return newState;\n\n    default:\n      return state;\n  }\n\n  ;\n};\n\nexport default songReducer; //todo define types\n// CRUD\n//CREATE\n// const CREATE_NOTEBOOK = 'notebooks/createNotebooks'\n// //READ\n// const GET_NOTEBOOK = 'notebooks/getNotebooks'\n// //UPDATE\n// const UPDATE_NOTEBOOK = 'notebooks/updateNotebooks'\n// //DELETE\n// const DELETE_NOTEBOOK = 'notebooks/deleteNotebooks'\n// import { csrfFetch } from \"./csrf\";\n// //todo action creators\n// const actionCreateNotebook =(notebook) => {\n//     return {\n//         type: CREATE_NOTEBOOK,\n//         notebook\n//     }\n// }\n// const actionGetNotebook =(notebooks) => {\n//     return {\n//         type: READ_NOTEBOOK,\n//         notebooks\n//     }\n// }\n// const actionUpdateNotebook =(notebook) => {\n//     return {\n//         type: UPDATE_NOTEBOOK,\n//         notebook\n//     }\n// }\n// const actionDeleteNotebook =(notebookId) => {\n//     return {\n//         type: DELETE_NOTEBOOK,\n//         notebookId\n//     }\n// }\n//todo thunks\n// in backend/routes/api/index.js prefixed with a path\n// export const thunkGetAllNotebooks = (user) => async (disptch) => {\n//     const response = await csrfFetch(`/api/notebooks/user/${userId}`)\n//     if (response.ok) {\n//         const data = await response.json();\n//         dispatch(actionGetNotebook(data));\n//         return response;\n//     } else {\n//         return await response.json()\n//     }\n// }\n// export const login = (user) => async(disptch) => {\n//     const { credential, password } = user;\n//     const response = await csrfFetch('/api/session', {\n//         method: 'POST',\n//         body: JSON.stringify({\n//             credential,\n//             password\n//         }),\n//     });\n//     const data = await response.json();\n//     dispatch(setUser(data.user));\n//     return response;\n// }\n// export const login = (user) => async(disptch) => {\n//     const { credential, password } = user;\n//     const response = await csrfFetch('/api/session', {\n//         method: 'POST',\n//         body: JSON.stringify({\n//             credential,\n//             password\n//         }),\n//     });\n//     const data = await response.json();\n//     dispatch(setUser(data.user));\n//     return response;\n// }\n// export const login = (user) => async(disptch) => {\n//     const { credential, password } = user;\n//     const response = await csrfFetch('/api/session', {\n//         method: 'POST',\n//         body: JSON.stringify({\n//             credential,\n//             password\n//         }),\n//     });\n//     const data = await response.json();\n//     dispatch(setUser(data.user));\n//     return response;\n// }\n//todo reducer add it to the reducer in store/index.js and import\n//  const notebooks = (state = {}, action) => {\n//     let newState = {...state}\n//     switch (action.type) {\n//       case CREATE_NOTEBOOK:\n//         newState = Object.assign({}, state);\n//         newState.user = action.payload;\n//         return newState;\n//       case GET_NOTEBOOK:\n//         //normalization\n//        action.notebooks.forEach(notebook => {\n//             newState[notebook.id] = notebook\n//        })\n//         return newState;\n//       case UPDATE_NOTEBOOK:\n//         newState = Object.assign({}, state);\n//         newState.user = action.payload;\n//         return newState;\n//       case DELETE_NOTEBOOK:\n//         delete newState[action.notebookId]\n//         return newState;\n//       default:\n//         return state;\n//     }\n//   };\n//   export default notebooks\n// after full crud go back to the component and make it use redux\n// import { useDispatch, useSelector} from 'react-redux';\n// async function onDelete(notebookId) {\n//     console.log('BYE')\n// }\n// const dispatch = useDispatch;\n// const selectorNotebooks = useSelector(state => state.notebooks)\n// import thunkGetAllNotebooks from '../store/notebooks'\n// inside\n// useEffect(()=> {\n//     dispatch(thunkGetAllNotebooks(notebookId))\n// }, [dispatch])\n// useEffect(()=> {\n//     if (selectorNotebooks) {\n//     selectorNotebooks(Object.values(selectorNotebooks))\n// }\n// }, [selectorNotebooks])","map":{"version":3,"names":["csrfFetch","PLAY_SONGS","ADD_SONG","EDIT_SONG","DELETE_SONG","playSongs","songs","type","addSong","song","editSong","deleteSong","playAllSongs","dispatch","response","method","ok","json","addNewSong","songFile","formData","FormData","console","log","Song","file","append","fileName","userId","headers","body","newSong","editNewSong","songEdit","JSON","stringify","newSongEdit","deleteCurrentSong","id","initialState","songReducer","state","action","newState","forEach"],"sources":["/home/jasontang/noiseNimbus/frontend/src/store/Song.js"],"sourcesContent":["import { csrfFetch } from \"./csrf\";\n\nconst PLAY_SONGS = \"api/PLAYSONGS\";\nconst ADD_SONG = \"api/ADDSONG\";\nconst EDIT_SONG = \"api/EDITSONG\";\nconst DELETE_SONG = \"api/DELETESONG\";\n\nconst playSongs = (songs) => ({\n    type: PLAY_SONGS,\n    songs,\n  });\n\n  const addSong = (song) => ({\n    type: ADD_SONG,\n    song,\n  });\n\n  const editSong = (song) => ({\n    type: EDIT_SONG,\n    song,\n  });\n\n  const deleteSong = (song) => ({\n    type: DELETE_SONG,\n    song,\n  });\n\n\n  export const playAllSongs = () => async (dispatch) => {\n    const response = await csrfFetch(\"/api/music/Songs\", {\n        method:\"GET\",\n    });\n\n    if (response.ok) {\n        const songs = await response.json();\n        dispatch(playSongs(songs));\n        return songs;\n    };\n  };\n\n\n  export const addNewSong = (songFile) => async (dispatch) => {\n    const formData = new FormData();\n    console.log(Song.file);\n    formData.append('Song', Song.file);\n    formData.append('fileName', Song.fileName);\n    formData.append('userId', Song.userId);\n\n    const response = await csrfFetch(\"/api/music/Songs\", {\n        method:\"POST\",\n        headers: {\n            \"Content-Type\": \"multipart/form-data\"\n        },\n        body:formData\n    });\n\n    if (response.ok) {\n        const newSong = await response.json();\n        dispatch(addSong(newSong));\n        dispatch(playAllSongs());\n        return true;\n    };\n  };\n\n\n  export const editNewSong = (songEdit) => async (dispatch) => {\n    songEdit = JSON.stringify(songEdit);\n\n    const response = await csrfFetch(\"/api/music/Songs\", {\n        method: \"PUT\",\n        headers: { \"ContentType\": \"application/json\" },\n        body: songEdit,\n    });\n\n    if (response.ok) {\n        const newSongEdit = await response.json();\n        dispatch(editSong(newSongEdit));\n        return true;\n    };\n  };\n\n  export const deleteCurrentSong = (song) = async (dispatch) => {\n    const response = await csrfFetch(`/api/music/Songs/${song.id}`, {\n        method: \"DELETE\"\n    });\n\n    if (response.ok) {\n        dispatch(deleteSong(song));\n    }\n  };\n\n  const initialState = {};\n\n  const songReducer = (state = initialState, action) => {\n    const newState = {...state};\n    switch (action.type) {\n        case PLAY_SONGS:\n            action.songs.forEach((song) => (newState[song.id]= song));\n            return newState;\n\n        case ADD_SONG:\n            return {...state, [action.Song.id]: {...action.Song}};\n\n        case EDIT_SONG:\n            return {...state, [action.song.id]: {...action.song}};\n\n        case DELETE_SONG:\n            delete newState[action.song.id];\n            return newState;\n        default:\n            return state;\n    };\n  };\n\n\n\n  export default songReducer\n\n\n//todo define types\n// CRUD\n//CREATE\n// const CREATE_NOTEBOOK = 'notebooks/createNotebooks'\n// //READ\n// const GET_NOTEBOOK = 'notebooks/getNotebooks'\n// //UPDATE\n// const UPDATE_NOTEBOOK = 'notebooks/updateNotebooks'\n// //DELETE\n// const DELETE_NOTEBOOK = 'notebooks/deleteNotebooks'\n\n// import { csrfFetch } from \"./csrf\";\n\n// //todo action creators\n// const actionCreateNotebook =(notebook) => {\n//     return {\n//         type: CREATE_NOTEBOOK,\n//         notebook\n//     }\n// }\n\n// const actionGetNotebook =(notebooks) => {\n//     return {\n//         type: READ_NOTEBOOK,\n//         notebooks\n//     }\n// }\n\n// const actionUpdateNotebook =(notebook) => {\n//     return {\n//         type: UPDATE_NOTEBOOK,\n//         notebook\n//     }\n// }\n\n// const actionDeleteNotebook =(notebookId) => {\n//     return {\n//         type: DELETE_NOTEBOOK,\n//         notebookId\n//     }\n// }\n\n\n//todo thunks\n// in backend/routes/api/index.js prefixed with a path\n// export const thunkGetAllNotebooks = (user) => async (disptch) => {\n\n//     const response = await csrfFetch(`/api/notebooks/user/${userId}`)\n\n//     if (response.ok) {\n//         const data = await response.json();\n//         dispatch(actionGetNotebook(data));\n//         return response;\n//     } else {\n//         return await response.json()\n//     }\n// }\n\n// export const login = (user) => async(disptch) => {\n//     const { credential, password } = user;\n//     const response = await csrfFetch('/api/session', {\n//         method: 'POST',\n//         body: JSON.stringify({\n//             credential,\n//             password\n//         }),\n//     });\n//     const data = await response.json();\n//     dispatch(setUser(data.user));\n//     return response;\n// }\n\n// export const login = (user) => async(disptch) => {\n//     const { credential, password } = user;\n//     const response = await csrfFetch('/api/session', {\n//         method: 'POST',\n//         body: JSON.stringify({\n//             credential,\n//             password\n//         }),\n//     });\n//     const data = await response.json();\n//     dispatch(setUser(data.user));\n//     return response;\n// }\n\n// export const login = (user) => async(disptch) => {\n//     const { credential, password } = user;\n//     const response = await csrfFetch('/api/session', {\n//         method: 'POST',\n//         body: JSON.stringify({\n//             credential,\n//             password\n//         }),\n//     });\n//     const data = await response.json();\n//     dispatch(setUser(data.user));\n//     return response;\n// }\n\n\n//todo reducer add it to the reducer in store/index.js and import\n\n//  const notebooks = (state = {}, action) => {\n//     let newState = {...state}\n//     switch (action.type) {\n//       case CREATE_NOTEBOOK:\n//         newState = Object.assign({}, state);\n//         newState.user = action.payload;\n//         return newState;\n\n//       case GET_NOTEBOOK:\n//         //normalization\n//        action.notebooks.forEach(notebook => {\n//             newState[notebook.id] = notebook\n//        })\n//         return newState;\n\n//       case UPDATE_NOTEBOOK:\n//         newState = Object.assign({}, state);\n//         newState.user = action.payload;\n//         return newState;\n\n//       case DELETE_NOTEBOOK:\n\n//         delete newState[action.notebookId]\n//         return newState;\n\n//       default:\n//         return state;\n//     }\n//   };\n\n//   export default notebooks\n\n\n// after full crud go back to the component and make it use redux\n\n// import { useDispatch, useSelector} from 'react-redux';\n\n// async function onDelete(notebookId) {\n//     console.log('BYE')\n// }\n\n// const dispatch = useDispatch;\n// const selectorNotebooks = useSelector(state => state.notebooks)\n\n// import thunkGetAllNotebooks from '../store/notebooks'\n// inside\n// useEffect(()=> {\n//     dispatch(thunkGetAllNotebooks(notebookId))\n// }, [dispatch])\n\n// useEffect(()=> {\n//     if (selectorNotebooks) {\n//     selectorNotebooks(Object.values(selectorNotebooks))\n// }\n// }, [selectorNotebooks])\n"],"mappings":"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},"metadata":{},"sourceType":"module"}