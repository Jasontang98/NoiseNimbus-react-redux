{"ast":null,"code":"// import { csrfFetch } from \"./csrf\";\n// const PLAY_SONGS = \"/api/PLAYSONGS\";\n// const ADD_SONG = \"/api/ADDSONG\";\n// const EDIT_SONG = \"/api/EDITSONG\";\n// const DELETE_SONG = \"/api/DELETESONG\";\n// const playSongs = (songs) => ({\n//     type: PLAY_SONGS,\n//     songs,\n//   });\n//   const addSong = (songFile) => ({\n//     type: ADD_SONG,\n//     songFile,\n//   });\n//   const editSong = (song) => ({\n//     type: EDIT_SONG,\n//     song,\n//   });\n//   const deleteSong = (song) => ({\n//     type: DELETE_SONG,\n//     song,\n//   });\n//   export const playAllSongs = () => async (dispatch) => {\n//     const response = await csrfFetch(\"/api/song/Songs\", {\n//         method:\"GET\",\n//     });\n//     if (response.ok) {\n//         const songs = await response.json();\n//         dispatch(playSongs(songs));\n//         return songs;\n//     };\n//   };\n//   export const addNewSong = (songFile) => async (dispatch) => {\n//     const formData = new FormData();\n//     console.log(songFile.file);\n//     formData.append('song', songFile.file);\n//     formData.append('fileName', songFile.fileName);\n//     formData.append('userId', songFile.userId);\n//     const response = await csrfFetch(\"/api/song/Songs\", {\n//         method:\"POST\",\n//         headers: {\n//             \"Content-Type\": \"multipart/form-data\"\n//         },\n//         body:formData\n//     });\n//     if (response.ok) {\n//         const newSong = await response.json();\n//         dispatch(addSong(newSong));\n//         dispatch(playAllSongs());\n//         return true;\n//     };\n//   };\n//   export const editNewSong = (songEdit) => async (dispatch) => {\n//     songEdit = JSON.stringify(songEdit);\n//     const response = await csrfFetch(\"/api/song/Songs\", {\n//         method: \"PUT\",\n//         headers: { \"ContentType\": \"application/json\" },\n//         body: songEdit,\n//     });\n//     if (response.ok) {\n//         const newSongEdit = await response.json();\n//         dispatch(editSong(newSongEdit));\n//         return true;\n//     };\n//   };\n//   export const deleteCurrentSong = (song) = async (dispatch) => {\n//     const response = await csrfFetch(`/api/song/Songs/${song.id}`, {\n//         method: \"DELETE\"\n//     });\n//     if (response.ok) {\n//         dispatch(deleteSong(song));\n//     }\n//   };\n//   const initialState = {};\n//   const songReducer = (state = initialState, action) => {\n//     const newState = {...state};\n//     switch (action.type) {\n//         case PLAY_SONGS:\n//             action.songs.forEach((song) => (newState[song.id]= song));\n//             return newState;\n//         case ADD_SONG:\n//             return {...state, [action.songFile.id]: {...action.songFile}};\n//         case EDIT_SONG:\n//             return {...state, [action.song.id]: {...action.song}};\n//         case DELETE_SONG:\n//             delete newState[action.song.id];\n//             return newState;\n//         default:\n//             return state;\n//     };\n//   };\n//   export default songReducer;\n// //todo define types\n// // CRUD\n// //CREATE\n// // const CREATE_NOTEBOOK = 'notebooks/createNotebooks'\n// // //READ\n// // const GET_NOTEBOOK = 'notebooks/getNotebooks'\n// // //UPDATE\n// // const UPDATE_NOTEBOOK = 'notebooks/updateNotebooks'\n// // //DELETE\n// // const DELETE_NOTEBOOK = 'notebooks/deleteNotebooks'\n// // import { csrfFetch } from \"./csrf\";\n// // //todo action creators\n// // const actionCreateNotebook =(notebook) => {\n// //     return {\n// //         type: CREATE_NOTEBOOK,\n// //         notebook\n// //     }\n// // }\n// // const actionGetNotebook =(notebooks) => {\n// //     return {\n// //         type: READ_NOTEBOOK,\n// //         notebooks\n// //     }\n// // }\n// // const actionUpdateNotebook =(notebook) => {\n// //     return {\n// //         type: UPDATE_NOTEBOOK,\n// //         notebook\n// //     }\n// // }\n// // const actionDeleteNotebook =(notebookId) => {\n// //     return {\n// //         type: DELETE_NOTEBOOK,\n// //         notebookId\n// //     }\n// // }\n// //todo thunks\n// // in backend/routes/api/index.js prefixed with a path\n// // export const thunkGetAllNotebooks = (user) => async (disptch) => {\n// //     const response = await csrfFetch(`/api/notebooks/user/${userId}`)\n// //     if (response.ok) {\n// //         const data = await response.json();\n// //         dispatch(actionGetNotebook(data));\n// //         return response;\n// //     } else {\n// //         return await response.json()\n// //     }\n// // }\n// // export const login = (user) => async(disptch) => {\n// //     const { credential, password } = user;\n// //     const response = await csrfFetch('/api/session', {\n// //         method: 'POST',\n// //         body: JSON.stringify({\n// //             credential,\n// //             password\n// //         }),\n// //     });\n// //     const data = await response.json();\n// //     dispatch(setUser(data.user));\n// //     return response;\n// // }\n// // export const login = (user) => async(disptch) => {\n// //     const { credential, password } = user;\n// //     const response = await csrfFetch('/api/session', {\n// //         method: 'POST',\n// //         body: JSON.stringify({\n// //             credential,\n// //             password\n// //         }),\n// //     });\n// //     const data = await response.json();\n// //     dispatch(setUser(data.user));\n// //     return response;\n// // }\n// // export const login = (user) => async(disptch) => {\n// //     const { credential, password } = user;\n// //     const response = await csrfFetch('/api/session', {\n// //         method: 'POST',\n// //         body: JSON.stringify({\n// //             credential,\n// //             password\n// //         }),\n// //     });\n// //     const data = await response.json();\n// //     dispatch(setUser(data.user));\n// //     return response;\n// // }\n// //todo reducer add it to the reducer in store/index.js and import\n// //  const notebooks = (state = {}, action) => {\n// //     let newState = {...state}\n// //     switch (action.type) {\n// //       case CREATE_NOTEBOOK:\n// //         newState = Object.assign({}, state);\n// //         newState.user = action.payload;\n// //         return newState;\n// //       case GET_NOTEBOOK:\n// //         //normalization\n// //        action.notebooks.forEach(notebook => {\n// //             newState[notebook.id] = notebook\n// //        })\n// //         return newState;\n// //       case UPDATE_NOTEBOOK:\n// //         newState = Object.assign({}, state);\n// //         newState.user = action.payload;\n// //         return newState;\n// //       case DELETE_NOTEBOOK:\n// //         delete newState[action.notebookId]\n// //         return newState;\n// //       default:\n// //         return state;\n// //     }\n// //   };\n// //   export default notebooks\n// // after full crud go back to the component and make it use redux\n// // import { useDispatch, useSelector} from 'react-redux';\n// // async function onDelete(notebookId) {\n// //     console.log('BYE')\n// // }\n// // const dispatch = useDispatch;\n// // const selectorNotebooks = useSelector(state => state.notebooks)\n// // import thunkGetAllNotebooks from '../store/notebooks'\n// // inside\n// // useEffect(()=> {\n// //     dispatch(thunkGetAllNotebooks(notebookId))\n// // }, [dispatch])\n// // useEffect(()=> {\n// //     if (selectorNotebooks) {\n// //     selectorNotebooks(Object.values(selectorNotebooks))\n// // }\n// // }, [selectorNotebooks])","map":{"version":3,"names":[],"sources":["/home/jasontang/noiseNimbus/frontend/src/store/songFile.js"],"sourcesContent":["// import { csrfFetch } from \"./csrf\";\n\n// const PLAY_SONGS = \"/api/PLAYSONGS\";\n// const ADD_SONG = \"/api/ADDSONG\";\n// const EDIT_SONG = \"/api/EDITSONG\";\n// const DELETE_SONG = \"/api/DELETESONG\";\n\n// const playSongs = (songs) => ({\n//     type: PLAY_SONGS,\n//     songs,\n//   });\n\n//   const addSong = (songFile) => ({\n//     type: ADD_SONG,\n//     songFile,\n//   });\n\n//   const editSong = (song) => ({\n//     type: EDIT_SONG,\n//     song,\n//   });\n\n//   const deleteSong = (song) => ({\n//     type: DELETE_SONG,\n//     song,\n//   });\n\n\n//   export const playAllSongs = () => async (dispatch) => {\n//     const response = await csrfFetch(\"/api/song/Songs\", {\n//         method:\"GET\",\n//     });\n\n//     if (response.ok) {\n//         const songs = await response.json();\n//         dispatch(playSongs(songs));\n//         return songs;\n//     };\n//   };\n\n\n//   export const addNewSong = (songFile) => async (dispatch) => {\n//     const formData = new FormData();\n//     console.log(songFile.file);\n//     formData.append('song', songFile.file);\n//     formData.append('fileName', songFile.fileName);\n//     formData.append('userId', songFile.userId);\n\n//     const response = await csrfFetch(\"/api/song/Songs\", {\n//         method:\"POST\",\n//         headers: {\n//             \"Content-Type\": \"multipart/form-data\"\n//         },\n//         body:formData\n//     });\n\n//     if (response.ok) {\n//         const newSong = await response.json();\n//         dispatch(addSong(newSong));\n//         dispatch(playAllSongs());\n//         return true;\n//     };\n//   };\n\n\n//   export const editNewSong = (songEdit) => async (dispatch) => {\n//     songEdit = JSON.stringify(songEdit);\n\n//     const response = await csrfFetch(\"/api/song/Songs\", {\n//         method: \"PUT\",\n//         headers: { \"ContentType\": \"application/json\" },\n//         body: songEdit,\n//     });\n\n//     if (response.ok) {\n//         const newSongEdit = await response.json();\n//         dispatch(editSong(newSongEdit));\n//         return true;\n//     };\n//   };\n\n//   export const deleteCurrentSong = (song) = async (dispatch) => {\n//     const response = await csrfFetch(`/api/song/Songs/${song.id}`, {\n//         method: \"DELETE\"\n//     });\n\n//     if (response.ok) {\n//         dispatch(deleteSong(song));\n//     }\n//   };\n\n//   const initialState = {};\n\n//   const songReducer = (state = initialState, action) => {\n//     const newState = {...state};\n//     switch (action.type) {\n//         case PLAY_SONGS:\n//             action.songs.forEach((song) => (newState[song.id]= song));\n//             return newState;\n\n//         case ADD_SONG:\n//             return {...state, [action.songFile.id]: {...action.songFile}};\n\n//         case EDIT_SONG:\n//             return {...state, [action.song.id]: {...action.song}};\n\n//         case DELETE_SONG:\n//             delete newState[action.song.id];\n//             return newState;\n//         default:\n//             return state;\n//     };\n//   };\n\n\n//   export default songReducer;\n\n\n// //todo define types\n// // CRUD\n// //CREATE\n// // const CREATE_NOTEBOOK = 'notebooks/createNotebooks'\n// // //READ\n// // const GET_NOTEBOOK = 'notebooks/getNotebooks'\n// // //UPDATE\n// // const UPDATE_NOTEBOOK = 'notebooks/updateNotebooks'\n// // //DELETE\n// // const DELETE_NOTEBOOK = 'notebooks/deleteNotebooks'\n\n// // import { csrfFetch } from \"./csrf\";\n\n// // //todo action creators\n// // const actionCreateNotebook =(notebook) => {\n// //     return {\n// //         type: CREATE_NOTEBOOK,\n// //         notebook\n// //     }\n// // }\n\n// // const actionGetNotebook =(notebooks) => {\n// //     return {\n// //         type: READ_NOTEBOOK,\n// //         notebooks\n// //     }\n// // }\n\n// // const actionUpdateNotebook =(notebook) => {\n// //     return {\n// //         type: UPDATE_NOTEBOOK,\n// //         notebook\n// //     }\n// // }\n\n// // const actionDeleteNotebook =(notebookId) => {\n// //     return {\n// //         type: DELETE_NOTEBOOK,\n// //         notebookId\n// //     }\n// // }\n\n\n// //todo thunks\n// // in backend/routes/api/index.js prefixed with a path\n// // export const thunkGetAllNotebooks = (user) => async (disptch) => {\n\n// //     const response = await csrfFetch(`/api/notebooks/user/${userId}`)\n\n// //     if (response.ok) {\n// //         const data = await response.json();\n// //         dispatch(actionGetNotebook(data));\n// //         return response;\n// //     } else {\n// //         return await response.json()\n// //     }\n// // }\n\n// // export const login = (user) => async(disptch) => {\n// //     const { credential, password } = user;\n// //     const response = await csrfFetch('/api/session', {\n// //         method: 'POST',\n// //         body: JSON.stringify({\n// //             credential,\n// //             password\n// //         }),\n// //     });\n// //     const data = await response.json();\n// //     dispatch(setUser(data.user));\n// //     return response;\n// // }\n\n// // export const login = (user) => async(disptch) => {\n// //     const { credential, password } = user;\n// //     const response = await csrfFetch('/api/session', {\n// //         method: 'POST',\n// //         body: JSON.stringify({\n// //             credential,\n// //             password\n// //         }),\n// //     });\n// //     const data = await response.json();\n// //     dispatch(setUser(data.user));\n// //     return response;\n// // }\n\n// // export const login = (user) => async(disptch) => {\n// //     const { credential, password } = user;\n// //     const response = await csrfFetch('/api/session', {\n// //         method: 'POST',\n// //         body: JSON.stringify({\n// //             credential,\n// //             password\n// //         }),\n// //     });\n// //     const data = await response.json();\n// //     dispatch(setUser(data.user));\n// //     return response;\n// // }\n\n\n// //todo reducer add it to the reducer in store/index.js and import\n\n// //  const notebooks = (state = {}, action) => {\n// //     let newState = {...state}\n// //     switch (action.type) {\n// //       case CREATE_NOTEBOOK:\n// //         newState = Object.assign({}, state);\n// //         newState.user = action.payload;\n// //         return newState;\n\n// //       case GET_NOTEBOOK:\n// //         //normalization\n// //        action.notebooks.forEach(notebook => {\n// //             newState[notebook.id] = notebook\n// //        })\n// //         return newState;\n\n// //       case UPDATE_NOTEBOOK:\n// //         newState = Object.assign({}, state);\n// //         newState.user = action.payload;\n// //         return newState;\n\n// //       case DELETE_NOTEBOOK:\n\n// //         delete newState[action.notebookId]\n// //         return newState;\n\n// //       default:\n// //         return state;\n// //     }\n// //   };\n\n// //   export default notebooks\n\n\n// // after full crud go back to the component and make it use redux\n\n// // import { useDispatch, useSelector} from 'react-redux';\n\n// // async function onDelete(notebookId) {\n// //     console.log('BYE')\n// // }\n\n// // const dispatch = useDispatch;\n// // const selectorNotebooks = useSelector(state => state.notebooks)\n\n// // import thunkGetAllNotebooks from '../store/notebooks'\n// // inside\n// // useEffect(()=> {\n// //     dispatch(thunkGetAllNotebooks(notebookId))\n// // }, [dispatch])\n\n// // useEffect(()=> {\n// //     if (selectorNotebooks) {\n// //     selectorNotebooks(Object.values(selectorNotebooks))\n// // }\n// // }, [selectorNotebooks])\n"],"mappings},"metadata":{},"sourceType":"module"}